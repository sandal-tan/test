name: Automate Card Movement

on:
  project_card: 
    types:
      - moved

jobs:
  block-invalid-task:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.FACELESS_TOKEN}}
          script: |
            // Get the issue from the context
            // This is going to trigger another run of this code
            // if we have to move a card back
            const issue_url = context.payload.project_card.content_url
            const card_id = context.payload.project_card.id
            var path = require('path')
            const issue_number = path.basename(issue_url)

            const labelResp = await github.issues.listLabelsOnIssue({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const labels = labelResp.data

            var labelNames = []
            for (label of labels) {
              labelNames.push(label.name)
            }

            if  (labelNames.includes('task') && labelNames.includes('invalid')) {
              const currentColumnId = context.payload.project_card.column_id
              const currentColumnResp = await github.projects.getColumn({
                column_id: currentColumnId
              })

              const changes = context.payload.changes
              const currentColumn = currentColumnResp.data

              if (currentColumn.name != 'To do') {
                // This is hacky, but let's assume that that the invalid tasks are only
                // ever moved from the `To do` column so changes.column_id.from
                // Will be the column to move it to
                await github.projects.moveCard({
                  card_id: card_id,
                  position: 'top',
                  column_id: changes.column_id.from
                })

                // Maybe we should fail the job here
              }
            }  
  create-issue-branch:
    needs: block-invalid-task
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.FACELESS_TOKEN}}
          script: |
            const issue_url = context.payload.project_card.content_url
            var path = require('path')
            const issue_number = path.basename(issue_url)

            const labelResp = await github.issues.listLabelsOnIssue({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const labels = labelResp.data

            var labelNames = []
            for (label of labels) {
              labelNames.push(label.name)
            }

            if  (labelNames.includes('task') && !labelNames.includes('invalid')) {

              const currentColumnId = context.payload.project_card.column_id
              const currentColumnResp = await github.projects.getColumn({
                column_id: currentColumnId
              })

              const currentColumn = currentColumnResp.data

              if  (currentColumn.name == 'In progress') {
                // Make the reference name from the issue
                const issueResp = await github.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number
                })
                const issue = issueResp.data
                // Get the latest SHA on master
                const refResp = await github.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/master'
                })
                const ref = refResp.data
                const masterSha = ref.object.sha
                console.log(masterSha)
                const refName = `refs/heads/issue-${issue_number}_${issue.title.replace(' ', '_').toLowerCase()}`
                console.log(refName)

                // Create the branch
                await github.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: refName,
                  sha: masterSha
                })
              }

              // Create the Pull Request
              await github.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Issue ${issue_number}: ${issue.title}`,
                head: path.basename(refName),
                base: 'master',
                body: `Work to close #${issue_number}\n\n--- Task Body ---\n${issue.body}`,
                draft: true
              })
            }
